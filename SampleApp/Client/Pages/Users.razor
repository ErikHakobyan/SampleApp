@page "/users"
@using SampleApp.Client.Services
@using SampleApp.Client.Models

@inject UsersService userService
@inject IDialogService DialogService


<PageTitle>Users</PageTitle>

<h1>Users</h1>


@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
     <MudTable Items="@users.Items" Dense="false" Hover="true" Bordered="true"
          Striped="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Users</MudText>
            <MudSpacer />
             <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"
           OnClick="@(async () => await CreateUserAsync())">Create User</MudButton>
            
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<User, object>(x=>x.UserType)">User Type</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<User, object>(x=>x.Created)">Created</MudTableSortLabel>
            </MudTh>
            <MudTh>Last Modified</MudTh>
            <MudTh>Edit</MudTh>
            <MudTh>Delete</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Id</MudTd>
            <MudTd>@context.Name</MudTd>
            <MudTd>@context.UserType</MudTd>
            <MudTd>@context.Created</MudTd>
            <MudTd>@context.LastModified</MudTd>
            <MudTd>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary"
                       OnClick="@(async ()=>{await UpdateUserAsync(@context.Id);})">Edit</MudButton>
            </MudTd>
             <MudTd>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error"
                OnClick="@(async ()=>{await DeleteUserAsync(@context.Id);})">Delete</MudButton>
                </MudTd>
             
        </RowTemplate>
        <PagerContent>
            <MudPagination Variant="Variant.Filled" Count="users.TotalPages"
                       SelectedChanged="PageChangedAsync" Class="mr-5" />
        </PagerContent>
    </MudTable>
}

@code {
    private int PageNumber { get; set; } = 1;
    private int PageSize { get; set; } = 5;

    private PaginatedList<User>? users;
    DialogOptions maxWidthOptions = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };


    protected override async Task OnInitializedAsync()
    {
        await UpdateListAsync();
    }

    private async Task CreateUserAsync()
    {
        var dialog = DialogService.Show<Dialogs.AddUserDialog>("Create User", maxWidthOptions);
        var result = await dialog.Result;
        if (result != null && !result.Cancelled)
        {
            int id = (int)result.Data;
            if (id > 0)
            {
                PageNumber = 1;
                await UpdateListAsync();
            }
        }
    }
    private async Task UpdateUserAsync(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("UserId", id);

        var dialog = DialogService.Show<Dialogs.UpdateUserDialog>("Update User", parameters, maxWidthOptions);
        var result = await dialog.Result;
        if (result != null && !result.Cancelled
            && (bool)result.Data)
        {
            users.Items[users.Items.FindIndex(u => u.Id == id)] = await userService.GetUserById(id);
        }
    }
    private async Task DeleteUserAsync(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this User? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        DialogResult result = await DialogService.Show<Dialogs.Dialog>("Delete", parameters, options).Result;

        if (result != null)
        {
            bool successfullyUpdated = (bool)(result.Data ?? false);
            if (successfullyUpdated)
            {
                await userService.DeleteUser(id);
                await UpdateListAsync();
                //StateHasChanged();
            }
        }
    }
    private async Task UpdateListAsync()
    {
        users = await userService.GetUsers(PageNumber,PageSize);
    }
    public async Task PageChangedAsync(int pageNumber)
    {
        PageNumber=pageNumber;
        await UpdateListAsync();
    }
}
